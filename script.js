let xp = 0;
let health = 100;
let gold = 50;
let currentWeapon = 0;
let fighting;
let monsterHealth;
let inventory = ["–ø–∞–ª–∫–∞"];

const button1 = document.querySelector('#button1');
const button2 = document.querySelector("#button2");
const button3 = document.querySelector("#button3");
const text = document.querySelector("#text");
const xpText = document.querySelector("#xpText");
const healthText = document.querySelector("#healthText");
const goldText = document.querySelector("#goldText");
const monsterStats = document.querySelector("#monsterStats");
const monsterName = document.querySelector("#monsterName");
const monsterHealthText = document.querySelector("#monsterHealth");
const weapons = [
  { name: '–ü–∞–ª–∫–∞', power: 5 },
  { name: '–ö–ª–∏–Ω–æ–∫', power: 30 },
  { name: '–ö–æ–≥—Ç–µ–≤–æ–π –º–æ–ª–æ—Ç–æ–∫', power: 50 },
  { name: '–ú–µ—á', power: 100 }
];
const monsters = [
  {
    name: "–°–ª–∏–∑–Ω—è–∫",
    level: 2,
    health: 15
  },
  {
    name: "–ö–ª—ã–∫–∞—Å—Ç—ã–π –∑–≤–µ—Ä—å",
    level: 8,
    health: 60
  },
  {
    name: "–î—Ä–∞–∫–æ–Ω",
    level: 20,
    health: 300
  }
]
const locations = [
  {
    name: "town square",
    "button text": ["–ü–æ–π—Ç–∏ –≤ –º–∞–≥–∞–∑–∏–Ω", "–ü–æ–π—Ç–∏ –≤ –ø–µ—â–µ—Ä—É", "–°—Ä–∞–∑–∏—Ç—å—Å—è —Å –¥—Ä–∞–∫–æ–Ω–æ–º"],
    "button functions": [goStore, goCave, fightDragon],
    text: "–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –Ω–∞ –≥–æ—Ä–æ–¥—Å–∫–æ–π –ø–ª–æ—â–∞–¥–∏. –í—ã –≤–∏–¥–∏—Ç–µ –≤—ã–≤–µ—Å–∫—É —Å –Ω–∞–¥–ø–∏—Å—å—é \"–ú–∞–≥–∞–∑–∏–Ω\"."
  },
  {
    name: "store",
    "button text": ["–ö—É–ø–∏—Ç—å 10 –∑–¥–æ—Ä–æ–≤—å—è (10 –∑–æ–ª–æ—Ç–∞)", "–ö—É–ø–∏—Ç—å –æ—Ä—É–∂–∏–µ (30 –∑–æ–ª–æ—Ç–∞)", "–ü–æ–π—Ç–∏ –Ω–∞ –≥–æ—Ä–æ–¥—Å–∫—É—é –ø–ª–æ—â–∞–¥—å"],
    "button functions": [buyHealth, buyWeapon, goTown],
    text: "–í—ã –≤–æ—à–ª–∏ –≤ –º–∞–≥–∞–∑–∏–Ω."
  },
  {
    name: "cave",
    "button text": ["–°—Ä–∞–∑–∏—Ç—å—Å—è —Å–æ —Å–ª–∏–∑–Ω–µ–º", "–°—Ä–∞–∑–∏—Ç–µ—Å—å —Å –∫–ª—ã–∫–∞—Å—Ç—ã–º –∑–≤–µ—Ä–µ–º", "–ü–æ–π—Ç–∏ –Ω–∞ –≥–æ—Ä–æ–¥—Å–∫—É—é –ø–ª–æ—â–∞–¥—å"],
    "button functions": [fightSlime, fightBeast, goTown],
    text: "–í—ã –≤—Ö–æ–¥–∏—Ç–µ –≤ –ø–µ—â–µ—Ä—É. –í—ã –≤–∏–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–æ–Ω—Å—Ç—Ä–æ–≤."
  },
  {
    name: "fight",
    "button text": ["–ê—Ç–∞–∫–∞", "–£–∫–ª–æ–Ω–µ–Ω–∏–µ", "–£–±–µ–∂–∞—Ç—å"],
    "button functions": [attack, dodge, goTown],
    text: "–í—ã —Å—Ä–∞–∂–∞–µ—Ç–µ—Å—å —Å —á—É–¥–æ–≤–∏—â–µ–º."
  },
  {
    name: "kill monster",
    "button text": ["–ü–æ–π—Ç–∏ –Ω–∞ –≥–æ—Ä–æ–¥—Å–∫—É—é –ø–ª–æ—â–∞–¥—å", "–ü–æ–π—Ç–∏ –Ω–∞ –≥–æ—Ä–æ–¥—Å–∫—É—é –ø–ª–æ—â–∞–¥—å", "–ü–æ–π—Ç–∏ –Ω–∞ –≥–æ—Ä–æ–¥—Å–∫—É—é –ø–ª–æ—â–∞–¥—å"],
    "button functions": [goTown, goTown, easterEgg],
    text: '–£–º–∏—Ä–∞—è, –º–æ–Ω—Å—Ç—Ä –∫—Ä–∏—á–∏—Ç "–ê—Ä–≥!". –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –æ—á–∫–∏ –æ–ø—ã—Ç–∞ –∏ –Ω–∞—Ö–æ–¥–∏—Ç–µ –∑–æ–ª–æ—Ç–æ.'
  },
   {
    name: "lose",
    "button text": ["–ü–ï–†–ï–ò–ì–†–ê–¢–¨?", "–ü–ï–†–ï–ò–ì–†–ê–¢–¨?", "–ü–ï–†–ï–ò–ì–†–ê–¢–¨?"],
    "button functions": [restart, restart, restart],
    text: "–í—ã —É–º–µ—Ä–ª–∏. ‚ò†Ô∏è"
  },
  { 
    name: "win", 
    "button text": ["–ü–ï–†–ï–ò–ì–†–ê–¢–¨?", "–ü–ï–†–ï–ò–ì–†–ê–¢–¨?", "–ü–ï–†–ï–ò–ì–†–ê–¢–¨?"], 
    "button functions": [restart, restart, restart], 
    text: "–í—ã –ø–æ–±–µ–¥–∏–ª–∏ –¥—Ä–∞–∫–æ–Ω–∞! –í–´ –í–´–ò–ì–†–ê–õ–ò –ò–ì–†–£! üéâ" 
  },
  {
    name: "easter egg",
    "button text": ["2", "8", "–ü–æ–π—Ç–∏ –Ω–∞ –≥–æ—Ä–æ–¥—Å–∫—É—é –ø–ª–æ—â–∞–¥—å?"],
    "button functions": [pickTwo, pickEight, goTown],
    text: "–í—ã –Ω–∞—à–ª–∏ —Å–µ–∫—Ä–µ—Ç–Ω—É—é –∏–≥—Ä—É. –í—ã–±–µ—Ä–∏—Ç–µ —á–∏—Å–ª–æ, —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—ã—à–µ. –°–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º –±—É–¥—É—Ç –≤—ã–±—Ä–∞–Ω—ã –¥–µ—Å—è—Ç—å —á–∏—Å–µ–ª –æ—Ç 0 –¥–æ 10. –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –≤–∞–º–∏ —á–∏—Å–ª–æ —Å–æ–≤–ø–∞–¥–µ—Ç —Å –æ–¥–Ω–∏–º –∏–∑ —Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ª, –≤—ã –≤—ã–∏–≥—Ä–∞–µ—Ç–µ!"
  }
];

// initialize buttons
button1.onclick = goStore;
button2.onclick = goCave;
button3.onclick = fightDragon;

function update(location) {
  monsterStats.style.display = "none";
  button1.innerText = location["button text"][0];
  button2.innerText = location["button text"][1];
  button3.innerText = location["button text"][2];
  button1.onclick = location["button functions"][0];
  button2.onclick = location["button functions"][1];
  button3.onclick = location["button functions"][2];
  text.innerText = location.text;
}

function goTown() {
  update(locations[0]);
}

function goStore() {
  update(locations[1]);
}

function goCave() {
  update(locations[2]);
}

function buyHealth() {
  if (gold >= 10) {
    gold -= 10;
    health += 10;
    goldText.innerText = gold;
    healthText.innerText = health;
  } else {
    text.innerText = "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–æ–ª–æ—Ç–∞, —á—Ç–æ–±—ã –∫—É–ø–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ.";
  }
}

function buyWeapon() {
  if (currentWeapon < weapons.length - 1) {
    if (gold >= 30) {
      gold -= 30;
      currentWeapon++;
      goldText.innerText = gold;
      let newWeapon = weapons[currentWeapon].name;
      text.innerText = "–¢–µ–ø–µ—Ä—å —É –≤–∞—Å –µ—Å—Ç—å " + newWeapon + ".";
      inventory.push(newWeapon);
      text.innerText += " –í –≤–∞—à–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ –µ—Å—Ç—å " + inventory;
    } else {
      text.innerText = "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–æ–ª–æ—Ç–∞, —á—Ç–æ–±—ã –∫—É–ø–∏—Ç—å –æ—Ä—É–∂–∏–µ.";
    }
  } else {
    text.innerText = "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —Å–∞–º–æ–µ –º–æ—â–Ω–æ–µ –æ—Ä—É–∂–∏–µ!";
    button2.innerText = "–ü—Ä–æ–¥–∞–π—Ç–µ –æ—Ä—É–∂–∏–µ –∑–∞ 15 –∑–æ–ª–æ—Ç—ã—Ö";
    button2.onclick = sellWeapon;
  }
}

function sellWeapon() {
  if (inventory.length > 1) {
    gold += 15;
    goldText.innerText = gold;
    let currentWeapon = inventory.shift();
    text.innerText = "–í—ã –ø—Ä–æ–¥–∞–ª–∏ " + currentWeapon + ".";
    text.innerText += " –í –≤–∞—à–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ –µ—Å—Ç—å: " + inventory;
  } else {
    text.innerText = "–ù–µ –ø—Ä–æ–¥–∞–≤–∞–π—Ç–µ —Å–≤–æ–µ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ –æ—Ä—É–∂–∏–µ!";
  }
}

function fightSlime() {
  fighting = 0;
  goFight();
}

function fightBeast() {
  fighting = 1;
  goFight();
}

function fightDragon() {
  fighting = 2;
  goFight();
}

function goFight() {
  update(locations[3]);
  monsterHealth = monsters[fighting].health;
  monsterStats.style.display = "block";
  monsterName.innerText = monsters[fighting].name;
  monsterHealthText.innerText = monsterHealth;
}

function attack() {
  text.innerText = monsters[fighting].name + " –∞—Ç–∞–∫—É–µ—Ç.";
  text.innerText += " –í—ã –∞—Ç–∞–∫—É–µ—Ç–µ –µ–≥–æ —Å–≤–æ–∏–º " + weapons[currentWeapon].name + ".";
  health -= getMonsterAttackValue(monsters[fighting].level);
  if (isMonsterHit()) {
    monsterHealth -= weapons[currentWeapon].power + Math.floor(Math.random() * xp) + 1;    
  } else {
    text.innerText += " –í—ã –ø—Ä–æ–º–∞—Ö–Ω—É–ª–∏—Å—å.";
  }
  healthText.innerText = health;
  monsterHealthText.innerText = monsterHealth;
  if (health <= 0) {
    lose();
  } else if (monsterHealth <= 0) {
    if (fighting === 2) {
      winGame();
    } else {
      defeatMonster();
    }
  }
  if (Math.random() <= .1 && inventory.length !== 1) {
    text.innerText += " –í–∞—à " + inventory.pop() + " —Å–ª–æ–º–∞–ª—Å—è.";
    currentWeapon--;
  }
}

function getMonsterAttackValue(level) {
  const hit = (level * 5) - (Math.floor(Math.random() * xp));
  console.log(hit);
  return hit > 0 ? hit : 0;
}

function isMonsterHit() {
  return Math.random() > .2 || health < 20;
}

function dodge() {
  text.innerText = "–í—ã —É–∫–ª–æ–Ω–∏–ª–∏—Å—å –æ—Ç –∞—Ç–∞–∫–∏ " + monsters[fighting].name;
}

function defeatMonster() {
  gold += Math.floor(monsters[fighting].level * 6.7);
  xp += monsters[fighting].level;
  goldText.innerText = gold;
  xpText.innerText = xp;
  update(locations[4]);
}

function lose() {
  update(locations[5]);
}

function winGame() {
  update(locations[6]);
}

function restart() {
  xp = 0;
  health = 100;
  gold = 50;
  currentWeapon = 0;
  inventory = ["–ø–∞–ª–∫–∞"];
  goldText.innerText = gold;
  healthText.innerText = health;
  xpText.innerText = xp;
  goTown();
}

function easterEgg() {
  update(locations[7]);
}

function pickTwo() {
  pick(2);
}

function pickEight() {
  pick(8);
}

function pick(guess) {
  const numbers = [];
  while (numbers.length < 10) {
    numbers.push(Math.floor(Math.random() * 11));
  }
  text.innerText = "–í—ã –ø–æ–¥–æ–±—Ä–∞–ª–∏ " + guess + ". –í–æ—Ç —Å–ª—É—á–∞–π–Ω—ã–µ —á–∏—Å–ª–∞:\n";
  for (let i = 0; i < 10; i++) {
    text.innerText += numbers[i] + "\n";
  }
  if (numbers.includes(guess)) {
    text.innerText += "–¢–æ—á–Ω–æ! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ 20 –∑–æ–ª–æ—Ç—ã—Ö!";
    gold += 20;
    goldText.innerText = gold;
  } else {
    text.innerText += "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –í—ã —Ç–µ—Ä—è–µ—Ç–µ 10 –∑–¥–æ—Ä–æ–≤—å—è!";
    health -= 10;
    healthText.innerText = health;
    if (health <= 0) {
      lose();
    }
  }
}